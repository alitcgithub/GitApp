name: Example Workflow

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Step 0 - Checkout repository
        uses: actions/checkout@v2
        with:
          ref: 'master'

      - name: Step 1 - Print Working Directory
        run: |
          # Print the current working directory
          pwd

      - name: Step 2 - List Directory Contents
        run: |
          # Print the directory tree structure
          tree

      - name: Step 3 - Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
          
      - name: Step 4 - Build Java Program
        run: |
          # Compile and build your Java program
          javac -d classes src/main/java/org/example/FileGenerator.java
          tree
          pwd
          #cd classes
          #pwd
          #java org.example.FileGenerator
          echo ---------------------------
          ls -l
          #echo "Main-Class: org.example.FileGenerator" > manifest.txt
          #cd ..
          echo ------------- pwd -----------------
          pwd
          tree
          echo jar cvf lib/FileGenerator.jar -C classes .
          mkdir lib
          jar cvf lib/FileGenerator.jar -C classes .
          echo after jar command
          pwd
          ls -l
          tree

      - name: Step 5 - Generate File
        id: generate-file
        run: |
          # Run your Java program and capture the file name
          java -cp lib/FileGenerator.jar org.example.FileGenerator
          file_names=$(find dscripts -name "*.txt" -type f)
          echo "::set-output name=file-names::${file_names}"
          pwd
          tree

      - name: Step 6 - Run Script
        run: |
          # Use the file name generated in Step 5
          file_names=${{ steps.generate-file.outputs.file-names }}
          scripts_directory="dscripts"  # Specify the directory path if needed
          #java -jar script_runner.jar "$scripts_directory/$file_name"
          for file in $file_names; do
            # Process each generated file
            echo "Processing file: $file"
            # ... Your file processing logic here ...
            echo cat "$file"
            cat "$file"
          done
